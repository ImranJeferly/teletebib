rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	// Blog posts collection - allow everyone to read, restrict write access
    match /blog_posts/{document} {
      // Allow anyone to read all blog posts (published and drafts for admin preview)
    	allow read: if true;
      // Only allow authenticated admin users to write
      allow write: if request.auth != null && request.auth.token.email == 'imranjeferly@gmail.com';
    }
  
  	match /waitlist/{document} {
      allow write: if true;
      allow read: if request.auth != null && request.auth.token.email == 'imranjeferly@gmail.com';
    }
      // ===== USER MANAGEMENT (SUPPORTS BOTH APPS) =====
    match /users/{userId} {
      // Allow creating user documents for both doctors and patients
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading user documents (needed for phone verification and role checks)
      allow read: if true;
      
      // Allow users to update their own documents
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to delete their own documents
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // ===== DOCTOR VERIFICATION DOCUMENTS (UPDATED) =====
    match /doctorVerifications/{doctorId} {
      // Doctors can read their own verification data
      allow read: if request.auth != null && request.auth.uid == doctorId;
      
      // Doctors can create their initial record and update documents/info, but not status
      allow create: if request.auth != null && request.auth.uid == doctorId
        && request.resource.data.status == 'notStarted';
      
      // Doctors can update their documents and professional info, but not status
      allow update: if request.auth != null && request.auth.uid == doctorId
        && (
          // Allow updating to pending when submitting documents
          (resource.data.status == 'notStarted' && request.resource.data.status == 'pending')
          // Or updating documents/info without changing status
          || (request.resource.data.status == resource.data.status)
        );
      
      // Admin users can read and write all verification data
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== ADMIN COLLECTION =====
    match /admins/{adminId} {
      allow read: if request.auth != null && request.auth.uid == adminId;
    }

    // ===== VERIFIED DOCTORS (PUBLIC READ ACCESS) =====
    match /verifiedDoctors/{doctorId} {
      // Allow public read access to verified doctor data (for patient app)
      allow read: if true;
      
      // Only admins can manage verified doctor entries
      allow write: if request.auth != null &&
                  exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ===== DOCTOR PROFILES (PUBLIC READ ACCESS) =====
    match /doctors/{doctorId} {
      // Allow public read access to doctor data (for patient app to browse doctors)
      allow read: if true;
      
      // Only doctors can update their own profiles
      allow write: if request.auth != null && 
                  request.auth.uid == doctorId &&
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    // ===== PATIENT PROFILES =====
    match /patients/{patientId} {
      // Patients can manage their own profiles
      allow read, write: if request.auth != null && 
                        request.auth.uid == patientId;
      
      // Doctors can read patient profiles for consultations
      allow read: if request.auth != null &&
                 exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    // ===== APPOINTMENTS (BOTH APPS) =====
    match /appointments/{appointmentId} {
      // Allow reading appointments for availability checks (patient app needs this)
      allow read: if true;
      
      // Allow authenticated users to book/manage appointments
      allow write: if request.auth != null;
      
      // More specific rules for appointment participants
      allow read, write: if request.auth != null && 
                        (request.auth.uid == resource.data.doctorId || 
                         request.auth.uid == resource.data.patientId);
    }

    // ===== CHAT SYSTEM (BOTH APPS) =====
    match /chats/{chatId} {
      // Chat participants can read and update chats
      allow read: if request.auth != null && 
        resource.data.participants.hasAny([request.auth.uid]);
      
      allow create: if request.auth != null && 
        request.resource.data.participants.hasAny([request.auth.uid]);
      
      allow update: if request.auth != null && 
        resource.data.participants.hasAny([request.auth.uid]);
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        allow create, update: if request.auth != null && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
          (
            !request.resource.data.keys().hasAll(['isDeleted']) || 
            (
              request.resource.data.isDeleted == true && 
              resource.data.senderId == request.auth.uid
            )
          );
      }
    }
    
    // ===== VIDEO CALLING SYSTEM (BOTH APPS) =====
    
    // Main calls collection - authenticated users can read/write
    match /calls/{documentId} {
      allow read, write: if request.auth != null;
      
      // WebRTC subcollections for ICE candidates
      match /calleeCandidates/{candidateId} {
        allow read, write: if request.auth != null;
      }
      
      match /callerCandidates/{candidateId} {
        allow read, write: if request.auth != null;
      }
      
      match /iceCandidates/{candidateId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Call logs collection
    match /callLogs/{logId} {
      allow read, write: if request.auth != null;
    }
    
    // ===== NOTIFICATIONS (BOTH APPS) =====
    match /notifications/{notificationId} {
      // Allow authenticated users to send notifications
      allow create: if request.auth != null;
      
      // Allow users to read their own notifications
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.recipientId;
    }

    // ===== ADDITIONAL COLLECTIONS FOR DOCTOR APP =====
    
    // Medical records (doctor app specific)
    match /medical_records/{recordId} {
      allow read, write: if request.auth != null &&
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }
    
    // Prescriptions (doctor app specific)
    match /prescriptions/{prescriptionId} {
      allow read, write: if request.auth != null &&
                        (request.auth.uid == resource.data.doctorId || 
                         request.auth.uid == resource.data.patientId);
    }
    
    // Doctor schedules and availability
    match /doctor_schedules/{scheduleId} {
      allow read: if true; // Public read for appointment booking
      allow write: if request.auth != null &&
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }
  }
}
